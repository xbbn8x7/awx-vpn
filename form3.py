from tkinter import *
import tkinter.font as tkFont
import os.path
from pathlib import Path
import shutil, time

timestr = time.strftime("%Y%m%d-%H%M%S")

cust_file = Path('/Users/xbbn8x7/Documents/work/vpn-awx/clientData')

if cust_file.is_file():
        shutil.move('/Users/xbbn8x7/Documents/work/vpn-awx/clientData', '/Users/xbbn8x7/Documents/work/clientData'+timestr)

def save_info():
        clientname_info = clientname.get()
        clientmodel_info = clientmodel.get()
        peerip_info = peerip.get()
        encrDom_info = encrDom.get()
        encrDomMask_info = encrDomMask.get()
        clientID_info = clientID.get()
        bgpas_info = bgpas.get()
#        psk_info = psk.get()

        file = open("/Users/xbbn8x7/Documents/work/vpn-awx/clientData", "w")
        file.write("client_name: ")
        file.write(clientname_info)
#       file.write("\n")
#       file.write(clientmodel_info)
        file.write("\n")
        file.write("client_pub_ip: ")
        file.write(peerip_info)
        file.write("\n")
        file.write("app_net: ")
        file.write(encrDom_info)
        file.write("\n")
        file.write("app_net_mask: ")
        file.write(encrDomMask_info)
        file.write("\n")
        file.write("client_id: ")
        file.write(clientID_info)
        file.write("\n")
        file.write("bgp_as: ")
        file.write(bgpas_info)
        file.write("\n")
#        file.write("psk_data: ")
#        file.write(psk_info)
        file.write("\n\n")

        file.write("#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
        file.write("# ASA Config\n")
        file.write("#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n")
        file.write("\n")
        file.write("#>>>>>>> Object Network Definitions########\n")
        file.write("# object network bnym")
        file.write("\n")
        file.write("# subnet 10.1.1.0 255.255.255.0")
        file.write("\n")
        file.write("# object network mynet")
        file.write("\n")
        file.write("# subnet 6.1.1.0 255.255.255.0")
        file.write("\n\n")
        file.write("#>>>>>>> Access List Definitions   >>>>>>>>\n")
        file.write("# access-list l2l_mynet extended permit ip 6.1.1.0 255.255.255.0 10.1.1.0 255.255.255.0")
        file.write("\n")
        file.write("# access-list allow-mynet extended permit ip 6.1.1.0 255.255.255.0 10.1.1.0 255.255.255.0")
        file.write("\n\n")
        file.write("#>>>>>>> NAT for VPN               >>>>>>>>\n")
        file.write("# nat (inside,outside) source static mynet mynet destination static bnym bnym no-proxy-arp route-lookup")
        file.write("\n")
        file.write("# access-group allow-mynet in interface inside")
        file.write("\n\n")
        file.write("#>>>>>>> IPSEC Proposal            >>>>>>>>\n")
        file.write("# crypto ipsec ikev2 ipsec-proposal AES256")
        file.write("\n")
        file.write("# protocol esp encryption aes-256")
        file.write("\n")
        file.write("# protocol esp integrity sha-1 md5")
        file.write("\n\n")
        file.write("#>>>>>>> Crypto Map Statements     >>>>>>>>\n")
        file.write("# crypto map outside_map 1 match address l2l_mynet")
        file.write("\n")
        file.write("# crypto map outside_map 1 set peer 20.1.1.1")
        file.write("\n")
        file.write("# crypto map outside_map 1 set ikev2 ipsec-proposal AES256")
        file.write("\n")
        file.write("# crypto map outside_map interface outside")
        file.write("\n\n")
        file.write("#>>>>>>> IKEv2 Definitions         >>>>>>>>\n")
        file.write("# crypto ikev2 policy 10")
        file.write("\n")
        file.write("# encryption aes-256")
        file.write("\n")
        file.write("# integrity sha256")
        file.write("\n")
        file.write("# group 19")
        file.write("\n")
        file.write("# prf sha256")
        file.write("\n")
        file.write("# lifetime seconds 86400")
        file.write("\n")
        file.write("# crypto ikev2 enable outside")

        file.close


if __name__ == "__main__":

        screen = Tk()
        screen.option_add('*Font','12')
        screen.geometry("750x250")
        screen.title("Form")
        screen.tk.call('tk','scaling',2.0)



        heading = Label(text="Client VPN Entry Form", bg="grey", fg="black",width = "500", height="3")
#       heading.pack()

        fontStyle = tkFont.Font(family="Lucinda Console", size=100)

        clientname_text = Label(screen,text="Client name")
        clientmodel_text = Label(screen,text="Device type")
        peerip_text = Label(screen,text="Client Peer IP")
        encrDom_text = Label(screen,text="Encryption Domain")
        encrDomMask_text = Label(screen,text="Encryp Domain Mask")
        clientID_text = Label(screen,text="Client ID")
        bgpas_text = Label(screen,text="BGP AS")
#        psk_text = Label(screen,text="Preshared Key")


        clientname_text.grid(row=1,column=0)
        clientmodel_text.grid(row=2,column=0)
        peerip_text.grid(row=3,column=0)
        encrDom_text.grid(row=4,column=0)
        encrDomMask_text.grid(row=5,column=0)
        clientID_text.grid(row=6,column=0)
        bgpas_text.grid(row=7,column=0)
#        psk_text.grid(row=8,column=0)



#       clientname_text.pack()
#       peerip_text.pack()
#       encrDom_text.pack()
#       clientID_text.pack()
#       bgpas_text.pack()
#       psk_text.pack()

        clientname = StringVar()
        clientmodel = StringVar()
        peerip = StringVar()
        encrDom = StringVar()
        encrDomMask = StringVar()
        clientID = StringVar()
        bgpas = StringVar()
#        psk = StringVar()

        clientname = StringVar()
        clientmodel = StringVar()
        peerip = StringVar()
        encrDom = StringVar()
        encrDomMask = StringVar()
        clientID = StringVar()
        bgpas = StringVar()
#        psk = StringVar()

        clientname_entry = Entry(textvariable = clientname, width = "30")
        clientmodel_entry = Entry(textvariable = clientmodel, width = "30")
        peerip_entry = Entry(textvariable = peerip, width = "30")
        encrDom_entry = Entry(textvariable = encrDom, width = "30")
        encrDomMask_entry = Entry(textvariable = encrDomMask, width = "30")
        clientID_entry = Entry(textvariable = clientID, width = "30")
        bgpas_entry = Entry(textvariable = bgpas, width = "30")
#        psk_entry = Entry(textvariable = psk, width = "30")

#       clientname_entry.place(x = 5, y = 100)
#       peerip_entry.place(x = 5, y = 140)
#       encrDom_entry.place(x = 5, y = 180)
#       clientID_entry.place(x = 5, y = 220)
#       bgpas_entry.place(x = 5, y = 260)
#       psk_entry.place(x = 5, y = 300)

        clientname_entry.grid(row=1, column=1, ipadx="100")
        clientmodel_entry.grid(row=2, column=1, ipadx="100")
        peerip_entry.grid(row=3, column=1, ipadx="100")
        encrDom_entry.grid(row=4, column=1, ipadx="100")
        encrDomMask_entry.grid(row=5, column=1, ipadx="100")
        clientID_entry.grid(row=6, column=1, ipadx="100")
        bgpas_entry.grid(row=7, column=1, ipadx="100")
#        psk_entry.grid(row=8, column=1, ipadx="100")


        register  = Button(screen,text = "Write", command = save_info)
        register2 = Button(screen,text='Quit', command=screen.quit)
        register.grid(row=10, column=0)
        register2.grid(row=10,column=2)


        mainloop()
